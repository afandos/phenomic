{"head":{"title":"Internationalize your content","description":"You have multiple solutions available to help you translate your user interface and handle multiple locales. Here we will explain 2…"},"body":"<p>You have multiple solutions available to help you translate your user interface\nand handle multiple locales.</p>\n<p>Here we will explain 2 solutions based on\n<a href=\"https://github.com/yahoo/react-intl\">react-int</a>.</p>\n<p>First you need to install <code>react-intl</code>.</p>\n<pre><code class=\"hljs language-console\">npm <span class=\"hljs-keyword\">install</span> <span class=\"hljs-comment\">--save react-intl</span></code></pre>\n<h2 id=\"translating-your-content\"><a href=\"#translating-your-content\" class=\"phenomic-HeadingAnchor\">#</a>Translating your content</h2>\n<p>We will use a <code>YAML</code> file to translate our content since this file format is\neasier to update than JSON (assuming your projects have simple needs).</p>\n<p>Obviously you can adjust this to a more complicated format if needed.</p>\n<p>You will need to get <code>yaml-loader</code> and <code>json-loader</code>.</p>\n<pre><code class=\"hljs language-console\">npm install --<span class=\"hljs-built_in\">save</span>-<span class=\"hljs-built_in\">dev</span> yaml-loader json-loader</code></pre>\n<p>We will also need to add a webpack configuration loader section</p>\n<pre><code class=\"hljs language-js\">{\n  <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.yml$/</span>,\n  <span class=\"hljs-attr\">loaders</span>: [ <span class=\"hljs-string\">\"json-loader\"</span>, <span class=\"hljs-string\">\"yaml-loader\"</span> ],\n},</code></pre>\n<p>Now create differents <code>.yml</code> files in a <code>translations</code> folder.\nIf you want handle two languages, you have to create two files,\nwith language key as filename.</p>\n<p><code>en.yml</code>:</p>\n<pre><code class=\"hljs language-yml\"><span class=\"hljs-attr\">locale:</span> <span class=\"hljs-string\">\"en\"</span>\n\n<span class=\"hljs-attr\">messages:</span>\n<span class=\"hljs-attr\">  phenomic-is-awesome:</span> <span class=\"hljs-string\">\"Phenomic is awesome !\"</span></code></pre>\n<p><code>fr.yml</code>:</p>\n<pre><code class=\"hljs language-yml\"><span class=\"hljs-attr\">locale:</span> <span class=\"hljs-string\">\"fr\"</span>\n\n<span class=\"hljs-attr\">messages:</span>\n<span class=\"hljs-attr\">  phenomic-is-awesome:</span> <span class=\"hljs-string\">\"Phenomic est génial !\"</span></code></pre>\n<p>From now you have 2 variations: with or without redux.</p>\n<p>Without redux the thing will be pretty simple:</p>\n<p>We will assume all your urls will contain the locale key as the first part</p>\n<pre><code>http://domain.tld/en\nhttp://domain.tld/fr\n</code></pre>\n<p>You can read the locale like this in your appContainer using <code>location</code> from\nreact-router context</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> locale = location.pathname.replace(<span class=\"hljs-regexp\">/^\\//</span>, <span class=\"hljs-string\">\"\"</span>).split(<span class=\"hljs-string\">\"/\"</span>)[<span class=\"hljs-number\">0</span>]</code></pre>\n<p>For you homepage, you can choose to rely on a default locale in your code.</p>\n<p>This should be enough in most cases.</p>\n<p>When you have the locale, you can rely on it in <code>AppContainer</code> to initialize\n<a href=\"https://github.com/yahoo/react-intl/wiki/Components#intlprovider\"><code>IntlProvider</code></a></p>\n<p>// @todo document more</p>\n<p>That said, you might want something more complex, you can use the following\nsection.</p>\n<hr>\n<h2 id=\"using-redux\"><a href=\"#using-redux\" class=\"phenomic-HeadingAnchor\">#</a>Using Redux</h2>\n<h3 id=\"create-redux-action\"><a href=\"#create-redux-action\" class=\"phenomic-HeadingAnchor\">#</a>Create redux action</h3>\n<p>We will define our <code>redux</code> actions constants.\nCreate an <code>actions.js</code> file under a <code>constants</code> folder.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> SET_LOCALE = <span class=\"hljs-string\">\"SET_LOCALE\"</span></code></pre>\n<h3 id=\"create-intl-actions\"><a href=\"#create-intl-actions\" class=\"phenomic-HeadingAnchor\">#</a>Create intl actions</h3>\n<p>We need to implement the <code>setLocale</code> <code>redux</code> action.</p>\n<p>We will need the <code>flat</code> lib to transform our translations files into flatten objects</p>\n<pre><code class=\"hljs language-console\">npm <span class=\"hljs-selector-tag\">i</span> -S flat</code></pre>\n<p>Create a <code>intl.js</code> file under an <code>actions</code> folder.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> {addLocaleData} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react-intl\"</span>\n<span class=\"hljs-keyword\">import</span> flatten <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"flat\"</span>\n\n<span class=\"hljs-comment\">// Import locales you need to handle</span>\n<span class=\"hljs-keyword\">import</span> __intlEN <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react-intl/locale-data/en\"</span>\n<span class=\"hljs-keyword\">import</span> __intlFR <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react-intl/locale-data/fr\"</span>\n\n<span class=\"hljs-comment\">// Import your translations files</span>\n<span class=\"hljs-keyword\">import</span> localeEN <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"translations/en.yml\"</span>\n<span class=\"hljs-keyword\">import</span> localeFR <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"translations/fr.yml\"</span>\n\n<span class=\"hljs-keyword\">import</span> {SET_LOCALE} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"constants/actions\"</span>\n\naddLocaleData(__intlEN)\naddLocaleData(__intlFR)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">compileLocale</span>(<span class=\"hljs-params\">locale, {messages, formats = {}}</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> {locale, <span class=\"hljs-attr\">messages</span>: flatten(messages), formats}\n}\n\n<span class=\"hljs-keyword\">const</span> LOCALES = {\n  <span class=\"hljs-string\">\"en\"</span>: compileLocale(<span class=\"hljs-string\">\"en\"</span>, localeEN),\n  <span class=\"hljs-string\">\"fr\"</span>: compileLocale(<span class=\"hljs-string\">\"fr\"</span>, localeFR),\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setLocale</span>(<span class=\"hljs-params\">locale</span>) </span>{\n  <span class=\"hljs-built_in\">window</span>.localStorage.setItem(<span class=\"hljs-string\">\"locale\"</span>, locale)\n  <span class=\"hljs-keyword\">return</span> {<span class=\"hljs-attr\">type</span>: SET_LOCALE, ...LOCALES[locale]}\n}</code></pre>\n<h3 id=\"create-intl-reducer\"><a href=\"#create-intl-reducer\" class=\"phenomic-HeadingAnchor\">#</a>Create intl reducer</h3>\n<p>Create a <code>intl.js</code> file under a <code>reducers</code> folder</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> {SET_LOCALE} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"constants/actions\"</span>\n\n<span class=\"hljs-keyword\">const</span> initialState = {\n  <span class=\"hljs-attr\">locale</span>: <span class=\"hljs-literal\">null</span>,\n  <span class=\"hljs-attr\">messages</span>: <span class=\"hljs-literal\">null</span>,\n  <span class=\"hljs-attr\">formats</span>: <span class=\"hljs-literal\">null</span>,\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">intlReducer</span>(<span class=\"hljs-params\">state = initialState, action</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (action.type === SET_LOCALE) {\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-attr\">locale</span>: action.locale,\n      <span class=\"hljs-attr\">messages</span>: action.messages,\n      <span class=\"hljs-attr\">formats</span>: action.formats,\n    }\n  }\n\n  <span class=\"hljs-keyword\">return</span> state\n}</code></pre>\n<h3 id=\"add-intl-reducer-to-your-store\"><a href=\"#add-intl-reducer-to-your-store\" class=\"phenomic-HeadingAnchor\">#</a>Add intl reducer to your store</h3>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> {combineReducers} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"redux\"</span>\n...\nimport * <span class=\"hljs-keyword\">as</span> phenomicReducers <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"phenomic/lib/redux/modules\"</span>\n<span class=\"hljs-keyword\">import</span> intl <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"reducers/intl\"</span>\n<span class=\"hljs-keyword\">const</span> store = createStore(\n  combineReducers({\n    ...phenomicReducers,\n    ...{\n      intl\n    },\n  }),\n  {...(<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">window</span> !== <span class=\"hljs-string\">\"undefined\"</span>) &#x26;&#x26; <span class=\"hljs-built_in\">window</span>.__INITIAL_STATE__},\n  [\n    thunk,\n    createLogger({<span class=\"hljs-attr\">collapsed</span>: <span class=\"hljs-literal\">true</span>}),\n  ],\n)</code></pre>\n<h3 id=\"overide-intl-in-context\"><a href=\"#overide-intl-in-context\" class=\"phenomic-HeadingAnchor\">#</a>Overide intl in context</h3>\n<p>The default <code>intl</code> in context can't change. We need to override the <code>intl</code> context by <code>intl</code> state from our <code>redux</code> store.\nTo do that, let's update the <code>AppContainer.js</code> :</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> {connect} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react-redux\"</span>\n...\nconst ReduxIntlProvider = connect(<span class=\"hljs-function\"><span class=\"hljs-params\">state</span> =></span> state.intl)(IntlProvider)\n<span class=\"hljs-keyword\">const</span> AppContainer = <span class=\"hljs-function\">(<span class=\"hljs-params\">props</span>) =></span> (\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ReduxIntlProvider</span>></span>\n    </span>&#x3C;Container>\n      &#x3C;DefaultHeadMeta />\n      &#x3C;Header />\n      &#x3C;Content>\n        {props.children}\n      &#x3C;/Content>\n      &#x3C;Footer />\n    &#x3C;/Container><span class=\"xml\">\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ReduxIntlProvider</span>></span></span>\n)</code></pre>\n<h3 id=\"get-your-translated-content\"><a href=\"#get-your-translated-content\" class=\"phenomic-HeadingAnchor\">#</a>Get your translated content</h3>\n<p>Add a metadata <code>locale</code> to your <code>.md</code> files</p>\n<pre><code class=\"hljs language-markdown\">---\ntitle: Your title\n<span class=\"hljs-section\">locale: en\n---</span>\nYour content</code></pre>\n<p>Then, use the <code>filter</code> option from <code>enhanceCollection</code> in your layouts to get your translated content :</p>\n<pre><code class=\"hljs language-js\">...\nclass Homepage extends Component {\n  render() {\n    <span class=\"hljs-keyword\">const</span> {collection} = <span class=\"hljs-keyword\">this</span>.context\n    <span class=\"hljs-keyword\">const</span> data = enhanceCollection(collection, {\n      <span class=\"hljs-attr\">filter</span>: {<span class=\"hljs-attr\">locale</span>: <span class=\"hljs-keyword\">this</span>.props.currentLocale},\n    })\n\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Page</span>></span>\n        // Render your data here\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Page</span>></span></span>\n    )\n  }\n}\n...\nexport <span class=\"hljs-keyword\">default</span> connect(\n  <span class=\"hljs-function\">(<span class=\"hljs-params\">{intl}</span>) =></span> ({<span class=\"hljs-attr\">currentLocale</span>: intl.locale}),\n)(Homepage)</code></pre>\n<h3 id=\"update-your-header\"><a href=\"#update-your-header\" class=\"phenomic-HeadingAnchor\">#</a>Update your header</h3>\n<p>Once you can have your translated content, we have to add two buttons in the header to change our locale.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// ...</span>\n<span class=\"hljs-keyword\">import</span> {browserHistory} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"phenomic/lib/client\"</span>\n<span class=\"hljs-keyword\">import</span> {setLocale} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"actions/intl\"</span>\n<span class=\"hljs-comment\">// ...</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Header</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{\n  ...\n  render() {\n    <span class=\"hljs-keyword\">const</span> {updateLocale} = <span class=\"hljs-keyword\">this</span>.props\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">header</span>></span>\n        </span>&#x3C;nav>\n          ...\n          &#x3C;div onClick={() => updateLocale(\"en\")}>{\"en\"}&#x3C;/div>\n          &#x3C;div onClick={() => updateLocale(\"fr\")}>{\"fr\"}&#x3C;/div>\n        &#x3C;/nav><span class=\"xml\">\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">header</span>></span></span>\n    )\n  }\n}\n<span class=\"hljs-comment\">// ...</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> connect(\n  <span class=\"hljs-literal\">null</span>,\n  dispatch => ({\n    ...\n    updateLocale: <span class=\"hljs-function\">(<span class=\"hljs-params\">locale</span>) =></span> {\n      dispatch(setLocale(locale))\n\n      <span class=\"hljs-comment\">/*\n        We recommend you to use different urls for each language and to redirect to your homepage.\n        Have a uniq url for a specific language has advantages :\n          - your SEO will be better\n          - your users could share urls easier with the right locale\n          - your UX will be better because you will avoid flash effect when the locale will change\n      */</span>\n      browserHistory.push(<span class=\"hljs-string\">\"/\"</span>)\n    },\n  })\n)(Header)</code></pre>\n<h3 id=\"initialize-with-right-locale\"><a href=\"#initialize-with-right-locale\" class=\"phenomic-HeadingAnchor\">#</a>Initialize with right locale</h3>\n<p>Now we need to initialize the site with the right locale.</p>\n<p>To do this, open your <code>scripts/phenomic.browser.js</code> and add :</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { setLocale } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"actions/intl\"</span>\n<span class=\"hljs-keyword\">const</span> DEFAULT_LOCALE = <span class=\"hljs-string\">\"en\"</span>\n\n<span class=\"hljs-comment\">// ...</span>\n\nstore.dispatch(setLocale(<span class=\"hljs-built_in\">window</span>.localStorage.getItem(<span class=\"hljs-string\">\"locale\"</span>) || DEFAULT_LOCALE)</code></pre>\n","__filename":"docs/usage/intl.md","__url":"/docs/usage/intl/","__resourceUrl":"/docs/usage/intl/index.html","__dataUrl":"/docs/usage/intl/index.html.cbb1234e53b0b7e2965de4843e5308c2.json"}